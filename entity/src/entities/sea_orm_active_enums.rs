//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Debug,
    Clone,
    PartialEq,
    Eq,
    EnumIter,
    DeriveActiveEnum,
    Serialize,
    Deserialize,
)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "ArtistType")]
pub enum ArtistType {
    #[sea_orm(string_value = "Group")]
    Group,
    #[sea_orm(string_value = "Person")]
    Person,
}
#[derive(
    Debug,
    Clone,
    PartialEq,
    Eq,
    EnumIter,
    DeriveActiveEnum,
    Serialize,
    Deserialize,
)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "DatePrecision")]
pub enum DatePrecision {
    #[sea_orm(string_value = "Day")]
    Day,
    #[sea_orm(string_value = "Month")]
    Month,
    #[sea_orm(string_value = "Year")]
    Year,
}
#[derive(
    Debug,
    Clone,
    PartialEq,
    Eq,
    EnumIter,
    DeriveActiveEnum,
    Serialize,
    Deserialize,
)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "EntityStatus")]
pub enum EntityStatus {
    #[sea_orm(string_value = "Accepted")]
    Accepted,
    #[sea_orm(string_value = "Archived")]
    Archived,
    #[sea_orm(string_value = "Pending")]
    Pending,
    #[sea_orm(string_value = "Rejected")]
    Rejected,
}
#[derive(
    Debug,
    Clone,
    PartialEq,
    Eq,
    EnumIter,
    DeriveActiveEnum,
    Serialize,
    Deserialize,
)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "ReleaseType")]
pub enum ReleaseType {
    #[sea_orm(string_value = "Album")]
    Album,
    #[sea_orm(string_value = "Compilation")]
    Compilation,
    #[sea_orm(string_value = "Demo")]
    Demo,
    #[sea_orm(string_value = "EP")]
    Ep,
    #[sea_orm(string_value = "Other")]
    Other,
    #[sea_orm(string_value = "Single")]
    Single,
}

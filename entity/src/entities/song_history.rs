//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize,
)]
#[sea_orm(table_name = "song_history")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub prev_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub next_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::song::Entity",
        from = "Column::NextId",
        to = "super::song::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Song2,
    #[sea_orm(
        belongs_to = "super::song::Entity",
        from = "Column::PrevId",
        to = "super::song::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Song1,
}

impl ActiveModelBehavior for ActiveModel {}
